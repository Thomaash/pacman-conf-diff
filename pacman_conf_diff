#!/usr/bin/env python3

"""Diffs .pacnews and .pacsaves."""

from pathlib import Path
from subprocess import run
import configparser
import json
import os
import re


class PCD:
    """Diffs .pacnews and .pacsaves."""

    pacnewRE = re.compile(r"\.pac(new|save)(\.\d+)?$")
    conf_path = os.path.join(
        os.environ.get("XDG_CONFIG_HOME") or os.environ["HOME"] + "/.config",
        "pacman_conf_diff.conf"
    )

    def __init__(self):
        self.pacnews = []
        self.init_conf()

    def run(self):
        self.find()
        self.diff()

    def init_conf(self):
        # Defaults
        self.conf = configparser.ConfigParser()
        self.conf.read_dict({
            "Commands": {
                "diff": json.dumps(["diff", "-y", "--suppress-common-lines"]),
                "edit": json.dumps([os.environ.get("EDITOR") or "nano"]),
                "mv": json.dumps(["mv"]),
                "rm": json.dumps(["rm"]),
                "sudo": json.dumps(["sudo"]),
            },
        })

        # Load existing config or save defaults
        if not self.conf.read(self.conf_path):
            with open(self.conf_path, "w") as conf_file:
                self.conf.write(conf_file)

    def get_cmd(self, name):
        return json.loads(self.conf["Commands"][name])

    def find(self):
        for dir_path, _, files in os.walk("/etc"):
            for f in files:
                pacnew = os.path.join(dir_path, f)
                if self.pacnewRE.search(pacnew):
                    self.pacnews.append(pacnew)

    def diff(self):
        while self.pacnews:
            pacnew = self.pacnews[0]
            current = self.getCurrent(pacnew)

            print("")
            print("Current: " + current if Path(current).exists() else "Current config file doesn't exist.")
            print("Pacnew:  " + pacnew)
            print("")
            print("  d) Diff")
            print("")
            print("  r) Replace current config file with pacnew or pacsave")
            print("")
            print(" rc) Remove current config file")
            print(" rn) Remove pacnew or pacsave")
            print("")
            print(" eb) Edit both")
            print(" ec) Edit current config file")
            print(" en) Edit pacnew or pacsave")
            print("")
            print("  n) Next file (skip/do nothing)")
            print("  q) Quit")
            print("")

            response = None
            while response not in {"q", "rc", "rn", "r", "n", "d", "eb", "ec", "en"}:
                response = input("?: ")

            if response == "q":
                return
            elif response == "dc":
                run(self.get_cmd("sudo") + self.get_cmd("rm") + [current])
            elif response == "dn":
                run(self.get_cmd("sudo") + self.get_cmd("rm") + [pacnew])
            elif response == "eb":
                run(self.get_cmd("sudo") + self.get_cmd("edit") + [current, pacnew])
            elif response == "ec":
                run(self.get_cmd("sudo") + self.get_cmd("edit") + [current])
            elif response == "en":
                run(self.get_cmd("sudo") + self.get_cmd("edit") + [pacnew])
            elif response == "r":
                run(self.get_cmd("sudo") + self.get_cmd("mv") + [pacnew, current])
            elif response == "n":
                self.pacnews.pop(0)
            elif response == "d":
                run(self.get_cmd("diff") + [pacnew, current])

    def getCurrent(self, pacnew):
        return self.pacnewRE.sub("", pacnew)


if __name__ == "__main__":
    PCD().run()
