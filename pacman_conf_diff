#!/usr/bin/env python3

"""Diffs .pacnews and .pacsaves."""

from pathlib import Path
from subprocess import run
import configparser
import json
import os
import re



class SimplePicker:
    """Offers a selection and let's the user pick one option."""

    class NoChoices(Exception):
        """Thrown when someone tries to make the user pick from 0 choices."""
        pass

    def __init__(self):
        self.choices = []
        self.choices_dict = {}
        self.width = 0

    def add_option(self, key, text):
        """
        Add an option.
        User will enter the key to select an option, therefore it should be short and easy to write (e.g. 7, e, abc…).
        """
        key = str(key)
        self.width = len(key) if len(key) > self.width else self.width

        dictionary = {
            "key": key,
            "text": text,
        }
        self.choices.append(dictionary)
        self.choices_dict[key] = dictionary

    def add_text(self, text):
        """Add a non-selectable text."""
        self.choices.append({
            "text": text,
        })

    def pick(self):
        """
        Let the user pick an option.
        Returns a dict with key and text the user chose.
        """
        if not self.choices_dict:
            raise self.NoChoices()
        template = " {key: >" + str(self.width) + "s}) {text:s}"

        print()
        for choice in self.choices:
            if "key" in choice:
                print(template.format(key=choice["key"], text=choice["text"]))
            else:
                print(choice["text"])
        print()

        response = ""
        while response not in self.choices_dict:
            response = input("?: ")

        return self.choices_dict[response]


class PCD:
    """Diffs .pacnews and .pacsaves."""

    pacnewRE = re.compile(r"\.pac(new|save)(\.\d+)?$")
    conf_path = os.path.join(
        os.environ.get("XDG_CONFIG_HOME") or os.environ["HOME"] + "/.config",
        "pacman_conf_diff.conf"
    )

    def __init__(self):
        self.pacnews = []
        self._init_conf()
        self.pacnew = None
        self.current = None

        self.action_picker = SimplePicker()
        self.action_picker.add_option("d", "Diff")
        self.action_picker.add_text("")
        self.action_picker.add_option("eb", "Edit both")
        self.action_picker.add_option("ec", "Edit current config file")
        self.action_picker.add_option("en", "Edit pacnew or pacsave")
        self.action_picker.add_text("")
        self.action_picker.add_option("rc", "Remove current config file")
        self.action_picker.add_option("rn", "Remove pacnew or pacsave")
        self.action_picker.add_option("r", "Replace current config file with pacnew or pacsave")
        self.action_picker.add_text("")
        self.action_picker.add_option("p", "Pick another file")
        self.action_picker.add_option("q", "Quit")

    def run(self):
        """Run interactive file/action selection."""
        self.find()
        if self.pacnews:
            self.pick_file()
            while self.pacnews:
                self.pick_action()
        else:
            print("There are no pacnews nor pacsaves.")

    def _init_conf(self):
        """Read configuration or create it with default values."""
        # Defaults
        self.conf = configparser.ConfigParser()
        self.conf.read_dict({
            "Commands": {
                "diff": json.dumps(["diff", "-y", "--suppress-common-lines"]),
                "edit": json.dumps([os.environ.get("EDITOR") or "nano"]),
                "mv": json.dumps(["sudo", "mv"]),
                "rm": json.dumps(["sudo", "rm"]),
            },
        })

        # Load existing config or save defaults
        if not self.conf.read(self.conf_path):
            with open(self.conf_path, "w") as conf_file:
                self.conf.write(conf_file)
                print("New config file was created: " + self.conf_path)

    def _get_cmd(self, name):
        """Return command from config in [cmd, arg…] format."""
        return json.loads(self.conf["Commands"][name])

    def _quit(self):
        self.pacnews.clear()

    def find(self):
        """Find pacnew and pacsave files."""
        for dir_path, _, files in os.walk("/etc"):
            for f in files:
                pacnew = os.path.join(dir_path, f)
                if self.pacnewRE.search(pacnew):
                    self.pacnews.append(pacnew)

    def pick_file(self):
        """Let the user pick a pacnew/pacsave file."""
        simple_picker = SimplePicker()
        if self.pacnews:
            self.pacnews = list(filter(lambda pacnew: Path(pacnew).exists(), self.pacnews))
            for index, pacnew in enumerate(self.pacnews):
                simple_picker.add_option(index, pacnew)
        else:
            simple_picker.add_text("All pacnews and pacsaves resolved.")
        simple_picker.add_text("")
        simple_picker.add_option("q", "Quit")

        response = simple_picker.pick()
        if response["key"] == "q":
            self._quit()
        else:
            self.pacnew = response["text"]
            self.current = self.pacnewRE.sub("", self.pacnew)

    def pick_action(self):
        """Let the user pick an action with the current file."""
        print("")
        print("Current: " + self.current if Path(self.current).exists() else "Current config file doesn't exist.")
        print("Pacnew:  " + self.pacnew if Path(self.pacnew).exists() else "Pacnew/pacsave file doesn't exist.")

        response = self.action_picker.pick()["key"]

        if response == "q":
            self._quit()
        elif response == "p":
            self.pick_file()
        elif response == "rc":
            run(self._get_cmd("rm") + [self.current])
        elif response == "rn":
            run(self._get_cmd("rm") + [self.pacnew])
        elif response == "eb":
            run(self._get_cmd("edit") + [self.current, self.pacnew])
        elif response == "ec":
            run(self._get_cmd("edit") + [self.current])
        elif response == "en":
            run(self._get_cmd("edit") + [self.pacnew])
        elif response == "r":
            run(self._get_cmd("mv") + [self.pacnew, self.current])
        elif response == "d":
            run(self._get_cmd("diff") + [self.pacnew, self.current])


if __name__ == "__main__":
    PCD().run()
